<?phpfunction color_cache ($im, $color){	global $color_cache;		if (!isset ($color_cache[$color[0].'_'.$color[1].'_'.$color[2]]))	{		$color_cache[$color[0].'_'.$color[1].'_'.$color[2]] = imagecolorallocate ($im, $color[0], $color[1], $color[2]);	}	return $color_cache[$color[0].'_'.$color[1].'_'.$color[2]];}function drawText ($im, $name, $size = 11){	doDrawText ($im, $name, $size, array (237, 223, 191));	//doDrawText ($im, $name, $size, array (255, 255, 255));}function doDrawText ($im, $name, $size, $color = array (255, 255, 255)){	$font = BASE_PATH.'static/fonts/slogan.ttf';	$color = imagecolorallocate ($im, $color[0], $color[1], $color[2]);		$fontsize = imagettfbbox ($size, 0, $font, $name);	$width = $fontsize[2] - $fontsize[0];		$dim = IMG_WIDTH / IMG_HEIGHT;	if ($dim > 2)	{		// Right bottom		$dest = array		(			floor ((IMG_WIDTH) - ($width)) - 5,			IMG_HEIGHT - 13 + ($size / 2)		);	}	else	{		// Center bottom		$dest = array		(			floor ((IMG_WIDTH / 2) - ($width / 2)),			IMG_HEIGHT - 18 + ($size / 2)		);		}		imagettftext ($im, $size, 0, $dest[0], $dest[1], $color, $font, $name);}define ('IMG_WIDTH', isset ($_GET['width']) ? (int)$_GET['width'] : 800);define ('IMG_HEIGHT', isset ($_GET['height']) ? (int)$_GET['height'] : 400);define ('IMG_ZOOM', isset ($_GET['zoom']) ? (int)$_GET['zoom'] : 100);// Check for dataif (isset ($player_id)){	$player = Neuron_GameServer::getPlayerFromOpenID ($player_id, true);	if ($player && $player->isFound ())	{		$village = $player->getMainVillage();				if ($village)		{			$loc = $village->buildings->getTownCenterLocation ();			define ('LOC_X', $loc[0]);			define ('LOC_Y', $loc[1]);		}		else		{			define ('LOC_X', isset ($_GET['x']) ? (int)$_GET['x'] : 0);			define ('LOC_Y', isset ($_GET['x']) ? (int)$_GET['y'] : 0);		}	}	else	{		define ('LOC_X', isset ($_GET['x']) ? (int)$_GET['x'] : 0);		define ('LOC_Y', isset ($_GET['x']) ? (int)$_GET['y'] : 0);	}}else{	define ('LOC_X', isset ($_GET['x']) ? (int)$_GET['x'] : 0);	define ('LOC_Y', isset ($_GET['x']) ? (int)$_GET['y'] : 0);}$disablecache = Neuron_Core_Tools::getInput ('_GET', 'nocache', 'varchar');$cache = Neuron_Core_Cache::__getInstance ('snapshots/');$name = isset ($_GET['slogan']) ? $_GET['slogan'] : '';$cachename = 'img'.LOC_X.'_'.LOC_Y.'_'.IMG_WIDTH.'_'.IMG_HEIGHT.'_'.IMG_ZOOM.'_'.strlen($name);if ($cache->hasCache ($cachename) && !$disablecache){	header("Content-type: image/png");	echo $cache->getCache ($cachename);}else{	if (IMG_WIDTH > 0 && IMG_HEIGHT > 0)	{		/*			$im = imagecreate (IMG_WIDTH, IMG_HEIGHT);		$background_color = imagecolorallocate($im, 200, 200, 200);		$text_color = imagecolorallocate($im, 233, 14, 91);		imagestring($im, 1, 5, 5,  "Dolumar " . date ('d/m/Y H:i:s') . ', '.LOC_X.', '.LOC_Y.'. Zoom: '.IMG_ZOOM.'%', $text_color);		*/		$im = Dolumar_Map_Map::getSnapshot (LOC_X, LOC_Y, IMG_WIDTH, IMG_HEIGHT, IMG_ZOOM);			if (!isset ($_GET['logo']) || $_GET['logo'] != false)		{			$logo_uri = BASE_PATH.'client/images/topmenu_center.png';					$logo = imagecreatefrompng ($logo_uri);						$logosize = getimagesize ($logo_uri);						$logozoom = 65;						$newsize = array			(				ceil ($logosize[0] * $logozoom / 100),				ceil ($logosize[1] * $logozoom / 100)			);						// Check the dimension of the map			$dim = IMG_WIDTH / IMG_HEIGHT;			if ($dim > 2)			{				// left center				$dest = array 				(					10, 10				);			}						else			{				// center center				$dest = array				(					floor ((IMG_WIDTH / 2) - ($newsize[0] / 2)),					10				);			}						imagecopyresampled ($im, $logo, $dest[0], $dest[1], 0, 0, $newsize[0], $newsize[1], $logosize[0], $logosize[1]);						// Check for village name			$name = isset ($_GET['slogan']) ? $_GET['slogan'] : false;			$name = urldecode ($name);						if (!empty ($name))			{				drawText ($im, $name);			}		}			// Should be okay. Let's do it.		header("Content-type: image/png");			ob_start ();		imagepng($im);		$buffer = ob_get_clean ();			echo $buffer;			$cache->setCache ($cachename, $buffer);			imagedestroy($im);		}	else	{		header('Status: 404 Not Found');		header('HTTP/1.0 404 Not Found');	}}?>